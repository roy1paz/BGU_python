# -*- coding: utf-8 -*-
"""hw1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tURdeRmODkGUUceeKD6Il_4LFY9obGbh

# Programming Assignment 1: Dicey Problems

Date of publication: 21.03.21
<br>
Date and time of submission: 08.04.21 23:59
<br>
Responsible T.A: Amir Bialer


<b>Submission guidelines</b>:


- Submit the assignment to the moodle submission system, exactly as you did in your "Introduction to computer science in Python" course.  

- Submit a single zip file named `<student ID>.zip` where `<student ID>` is YOUR ID, and the file should NOT be `.rar` or any other suffix. The zip file includes a folder named `hw1` that contains the `hw1.py` file complete with your code. <u>Do NOT</u> upload this file (`ProgrammingHW1.ipynb`). For example, if your ID is 123456789, then you should submit a zip file named `123456789.zip` with a `py` file named `hw1.py`.

- Write your answer in the designated areas (marked with `# YOUR CODE HERE`). Don't change any other part of the code! 

- We use special software to detect similiarities between submissions! All students with submissions suspected of copying will be taken out the course and handeled by university ethics board. 

- You should create tests to fully cover all the cases in your code. We added some examples tests for you in this notebook, you can use them to test your code, but they are NOT the complete tests. Your code will be tested on NEW tests.

- For full points, your code needs to successfully pass ALL of the tests.

- Edit the ID in the following code block. Please note that if you will not edit this line your work could be disqualified!
"""

# Author's ID: 208421271

"""## Notebook Setup

Important: These imports should be in your submission file (i.e., `hw1.py`). Do not remove them!

<font color="red">**DO NOT**</font> import other packages. You already have all the packages you need to complete this assignment.
"""

import random
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""You can use `random.random()` which generates random numbers between 0 and 1. 
You can also use `np.random.randint()`. See which one is more convinient for you.

## Random Seed
You must use random seeds in this homework. A random seed generates psudo-random numbers in a way which is replicable. It is good programming practice.  If a pseudorandom number generator is reinitialized with the same seed, it will always produce the same sequence of numbers. For instance the following code was initiazlied with random seeds 42, and  will always output `[3 4 2 4 4]`. **Don't change the random seed!** 

Example of seed use and random numbers generated:
"""

np.random.seed(42)
random.seed(42)

print(np.random.randint(5, size=5))

[random.random() for i in range(5)]

"""# Rolling Dice Simulation
In this problem we ask you to compute the probability of getting the highest number in a roll of multiple dice. To do this we will run an experiment which will roll dice for us in simulation. A normal die has 6 sides. But we will allow the die to have a different number of sides.

## Q1
Write a function, <code><font color ="blue">Two_Dice_Roll</font>(n)</code>, which generates $n$ random rolls of a pair of fair 6 sided dice and then outputs a sequence of the sum of the two dice for each roll.


<font  style="color:blue"> * **Code:** *</font>
```python
x = Two_Dice_Roll(10)
print x
```


<font  style="color:magenta"> * **Output:** *</font>
```
[7,9,8,6,11,7,6,2,6,8]
```

* Write your code for Two_Dice_Roll in the cell below
"""

# Modify this cell

def Two_Dice_Roll(n):
    """ input: n, generate a sequence of n random dice rolls
        output: return the sequnce of rolls outcome 
    """
    np.random.seed(42)
    result = np.random.randint(1,high=7, size=(2, n))
    sum_sequence = np.add(result[0],result[1])
    return sum_sequence

"""* If the following cell runs without error you'll receive some points."""

# Test function 

x = Two_Dice_Roll(500)
assert np.unique(x >= 2) == 1
assert np.unique(x <= 12) == 1
assert np.sum(x == 7) > np.sum(x == 12)

#
# AUTOGRADER TEST - DO NOT REMOVE
#

"""## Q2
Write a function <code><font color ="blue">Roll_Dice</font>(f)</code> where $f$ is a vector of dice. The length of vector $f$ specifies the number of dice, and the values in the vector indicate the number of sides for each of the dice. For example, $f=[2,4,5]$ means there are 3 dice with a number of sides $[ 2, 4, 5]$.   The function rolls the dice ONCE and returns the highest number that came out.
<br>
<br>
Example of rolling the dice mentioned in $f$:<br>
outcome= [1, 1, 4]<br>
highest number=max(outcome)=4<br>
<font  style="color:blue">  **Code:**</font>
```python
f = [2, 4, 5]
x = Roll_Dice(f)
print(x)
```


<font  style="color:magenta">  **Output:** </font>
```
4
```
"""

# Modify the code in this cell

def Roll_Dice(f):
    """ 
      input: f is a vector which specifys the number of sides for each of the dice
      output: return the higest number that came out of the roll
    """
    np.random.seed(42)
    result = []
    for i in range(len(f)):
      result.append(np.random.randint(1,high=f[i]+1))
    return max(result)

"""* If the following cell runs without error you'll receive some points."""

# Test function 

f = [2, 4, 16, 8, 3]
x = Roll_Dice(f)
assert(x >= 1)
assert(x <= max(f))

#
# AUTOGRADER TEST - DO NOT REMOVE
#

"""## Q3
Write a function <code><font color ="blue">Roll_Dice_m_Times</font>(f,m)</code> where $f$ is a vector of dice (as defined above), and $m$ is an integer that specifies the number of times to roll the dice.   The function returns a vector of length $m$ that includes the highest number that came out in each roll of the dice. <br> <br>
Example:<br>
<font  style="color:blue">  **Code:**</font>
```python
f = [2, 4, 5]
m = 10
x = Roll_Dice_m_Times(f, m)
print(x)
```


<font  style="color:magenta">  **Output:** </font>
```
(5,3,3,2,4,3,4,2,5,3)
```
"""

# Modify this cell

def Roll_Dice_m_Times(f, m):
  '''
      input:  f is a vector which specifys the number of sides for each of the dice
              m is an integer which specifys the number of times the dice should be rolled
      output: return the higest number that came out of each roll
    '''
  result = []
  for i in range(m):  
    result.append(Roll_Dice(f)) # max of each dice, which rolled m times
  return np.array(result)

"""## Q4
A histogram is a representation of the distribution of numerical data. In our case we will count the the number of times each possible result appeared in the data generated with <code><font color ="blue">Roll_Dice_m_Times</font>(f,m)</code>.<br>
The x-axis will contain possible values of the highest number. The y-axis will contain the number of times this value came out when rolling the dice $m$ times.
Write a function  <code><font color ="blue">Histogram</font>(f,m)</code> that shows the histogram and returns the counts for each possible solution. 
<br> <br>
Example:<br>
<font  style="color:blue">  **Code:**</font>
```python
f = [2, 4, 5]
m = 10
x = Histogram(f, m)
print(x)
```


<font  style="color:magenta">  **Output:** </font>
```
(0,2,4,2,2)
```
0 times the number 1 appeared in the results, 2 times the number 2 appeared in the results.. 
"""

# Modify this cell

def Histogram(f, m):
  '''
      input:  f is a vector which specifys the number of sides for each of the dice
              m is an integer which specifys the number of times the dice should be rolled
      output: the histogram generated by Roll_Dice_m_Times(f,m)
    '''
  result = np.zeros((max(f),), dtype=int)
  max_roll = Roll_Dice_m_Times(f,m)
  for i in max_roll:
    result[i-1] += 1
  return result

"""## Q5
Construct an experiment to estimate the probability that the highest number which will be returned by <code><font color ="blue">Roll_Dice</font>(f)</code>is $x$. To do so, write a function <code><font color ="blue">Simulation</font>(f,m,x)</code> that estimates the probability by looking at the histogram value of $x$ divided by the total amount of dice rolled. <br>
*hint:* The <code><font color ="blue">Histogram</font>(f,m)</code> function can be usefull.
<br><br>
Example of use: we can use the simulation to estimate the probability that the higest roll a normal die $(f=[6])$ is $3$ $(x=3)$ by rolling the die $m$ times.
"""

# Modify this cell

def Simulation(f, m, x):
  '''
      input:  f is a vector which specifys the number of sides for each of the dice
              m is an integer which specifys the number of times the dice should be rolled
              x is the value of the higest value rolled
      output: a probability estimate of the that 3 is the higest value returned by 
    '''
  hist = Histogram(f, m)
  print(hist)
  probability = float(hist[x-1]/m)
  return probability

"""## Food for thought (not graded):
* For $f=[2,5,7]$ use your experiments to compute the probability the highest roll returned by <code><font color ="blue">Roll_Dice</font>(f)</code> is 1.
Try to explain why.
* For $f=[7]$ use your experiments to compute the probability that <code><font color ="blue">Roll_Dice</font>(f)</code> is 7.
Try to explain why.

"""